- name: Install sudo
  become: true
  ansible.builtin.apt:
    name: sudo

- name: Load dotfiles vars
  ansible.builtin.include_vars:
    file: "{{ playbook_dir }}/roles/dotfiles/vars/main.yaml"

- name: Load secrets vars
  ansible.builtin.include_vars:
    file: "{{ playbook_dir }}/roles/secrets/vars/main.yaml"

- name: Check if credentials were decrypted
  ansible.builtin.stat:
    path: "{{ credentials_path }}"
  register: profile_creds_status

- name: Read credentials
  ansible.builtin.slurp:
    src: "{{ credentials_path }}"
  register: profile_encoded_creds
  when: profile_creds_status.stat.exists

- name: Set credentials
  ansible.builtin.set_fact:
    profile_password: "{{ profile_creds.password | password_hash(salt=profile_creds.salt) }}"
    ansible_sudo_pass: "{{ profile_creds.password }}"
  vars:
    profile_creds: "{{ profile_encoded_creds['content'] | b64decode | from_json }}"
  when: profile_creds_status.stat.exists
  tags:
    # TODO: see https://github.com/ansible/ansible-lint/issues/3456
    - skip_ansible_lint

- name: Set default credentials
  ansible.builtin.set_fact:
    profile_password: ""
  when: not profile_creds_status.stat.exists

- name: Add user "{{ user }}"
  become: true
  ansible.builtin.user:
    name: "{{ user }}"
    password: "{{ profile_password }}"
    groups:
      - adm
      - sudo
    append: true

- name: Add authorized_key for {{ user }}
  become: true
  ansible.posix.authorized_key:
    user: "{{ user }}"
    key: "{{ lookup('file', '{{ ssh_local_path }}/id_rsa.pub') }}"
  when: ansible_connection == "ssh"

- name: Switch ansible_user
  ansible.builtin.set_fact:
    ansible_user: "{{ user }}"
  tags:
    # TODO: see https://github.com/ansible/ansible-lint/issues/3456
    - skip_ansible_lint
