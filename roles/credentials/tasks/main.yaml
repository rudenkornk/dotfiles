# These tasks are executed twice:
# 1. The first run is when bootstrap playbook needs to create the target user.
#    In case of container and ssh connections, we have to also setup access and privileges escalation.
#    This assumes that local secrets were decrypted.
# 2. The second run is during the main playbook.
#    Since the main case of this config is to setup local machine, only after the main playbook
#    executes "secrets" role we can actually setup real credentials here.
#    (This it is not enough to only run this role once).

- name: Install sudo
  become: true
  ansible.builtin.package:
    name: sudo

- name: Create user with admin privileges
  become: true
  ansible.builtin.user:
    name: "{{ credentials_user }}"
    groups:
      - adm
      - "{{ {'Ubuntu': 'sudo', 'Fedora': 'wheel'}[ansible_distribution] }}"
    append: true

- name: Load ssh vars
  # NOTE: this var could be mentioned directly in this role `vars/main.yaml`.
  # But this would not work in initialization scenario,
  # since these tasks are included with `include_tasks` and do not load `vars/main.yaml`.
  ansible.builtin.include_vars:
    file: "{{ playbook_dir }}/roles/ssh_client/vars/local.yaml"

- name: Setup SSH connection access
  # NOTE: SSH connection setup is done only if ansible_connection == 'ssh'.
  # The main use case for this configuration is to setup main local machine.
  # Do not set up ssh access for local connection (i.e. my main machine) to avoid security risks.
  when: ansible_connection == "ssh"
  become: true
  block:
    # NOTE: this could have been done with a loop, instead of explicit block
    # However, Ansible does not correctly render {{ ansible_user }} inside loops
    # (which is the case, since {{ credentials_user }} is implicitly {{ ansible_user }})
    # https://www.reddit.com/r/ansible/comments/eo6lwq/why_is_ansible_user_not_defined_when_accessed/
    - name: Add authorized_key for root
      ansible.posix.authorized_key:
        user: root
        key: "{{ lookup('file', ssh_client_local_default_pub_key) }}"

    - name: Add authorized_key for {{ credentials_user }}
      ansible.posix.authorized_key:
        user: "{{ credentials_user }}"
        key: "{{ lookup('file', ssh_client_local_default_pub_key) }}"

- name: Try load encrypted credentials
  community.sops.load_vars:
    file: "{{ playbook_dir }}/roles/credentials/vars/credentials_map.sops.yaml"
  ignore_errors: true
  register: credentials_loaded

- name: Setup credentials for {{ credentials_user }}
  no_log: true
  when: not credentials_loaded.failed
  block:
    - name: Get host credentials
      ansible.builtin.set_fact:
        credentials_hashed_password: "{{ creds_user_conf.password | password_hash(salt=creds_user_conf.salt) }}"
        credentials_password: "{{ creds_user_conf.password }}"
      vars:
        credentials_kind: "{{ hostvars[inventory_hostname].credentials_kind | default('default_kind') }}"
        credentials_host: "{{ credentials_map[credentials_kind] }}"
        creds_user_conf: "{{ (credentials_host[credentials_user] | default(credentials_host.default_user)) }}"

    - name: Set password for {{ credentials_user }}
      become: true
      ansible.builtin.user:
        name: "{{ credentials_user }}"
        password: "{{ credentials_hashed_password }}"

    - name: Set ansible_sudo_pass
      ansible.builtin.set_fact:
        ansible_sudo_pass: "{{ credentials_password }}"
      when: credentials_user == ansible_user

- name: Setup passwordless sudo for {{ credentials_user }}
  become: true
  # There are two cases when we need to setup passwordless sudo:
  # 1. When we use ansible container connection, since it does not support password-full privileges escalation
  #     See https://github.com/ansible/ansible/issues/80254
  # 2. If setting up local user without decrypted secrets.
  #    The main use case is the CI usage, where we do not have decrypted passwords.
  #    This, however, creates a security risk for local scenarios.
  #    We will workaround it by removing passwordless sudo in the next task when
  #    credentials are decrypted.
  # 3. There is also a potential third scenario, when we setup SSH connection,
  #    but do not have decrypted credentials.
  #    Setting up passwordless sudo in this case is a critical security issue,
  #    so we do not do it here. Instead, expect privilege escalation errors later.
  when: (ansible_connection in ["docker", "podman"]) or
    (ansible_connection == "local" and credentials_loaded.failed)
  ansible.builtin.copy:
    dest: /etc/sudoers.d/{{ credentials_user }}-ansible-sudo
    content: "{{ credentials_user }} ALL=(ALL) NOPASSWD:ALL"
    mode: "0o440"

- name: Remove passwordless sudo for local connection for {{ credentials_user }}
  become: true
  when: ansible_connection == "local" and not credentials_loaded.failed
  ansible.builtin.file:
    path: /etc/sudoers.d/{{ credentials_user }}-ansible-sudo
    state: absent
