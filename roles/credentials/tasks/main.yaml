# These tasks are executed twice:
# 1. The first run is when bootstrap playbook needs to create the target user.
#    In case of container and ssh connections, we have to also setup access and privileges escalation.
#    This assumes that local secrets were decrypted.
# 2. The second run is during the main playbook.
#    Since the main case of this config is to setup local machine, only after the main playbook
#    executes "secrets" role we can actually setup real credentials here.
#    (This it is not enough to only run this role once).

- name: Install sudo
  become: true
  ansible.builtin.package:
    name: sudo

- name: Create user with admin privileges
  become: true
  ansible.builtin.user:
    name: "{{ credentials_user }}"
    groups:
      - adm
      - "{{ {'Ubuntu': 'sudo', 'Fedora': 'wheel'}[ansible_distribution] }}"
    append: true

- name: Setup SSH connection access
  vars:
    pubkey_path: "{{ playbook_dir }}/roles/ssh_client/files/keys/id_rsa.pub"
  block:
    - name: Check if public SSH key is decrypted
      # NOTE: be careful with block-wise "when: <condition>".
      # The way ansible "when" works leads to the underlying condition to be evaluated in the delegated context.
      # For example, if the target host is connected with SSH,
      # the "ansible_connection == 'ssh'" condition will be evaluated to false in the delegated local context!
      delegate_to: localhost
      ansible.builtin.stat:
        path: "{{ pubkey_path }}"
      register: pubkey_check

    - name: Emit warning if we use SSH connection, but public key is not decrypted
      ansible.builtin.fail:
        msg: "Warning: public key not decrypted for ssh connection: {{ pubkey_path }}.\n
          This will probably lead to connection issues later."
      when: not pubkey_check.stat.exists and ansible_connection == "ssh"
      failed_when: false

    - name: Add authorized_key for {{ item }}
      become: true
      ansible.posix.authorized_key:
        user: "{{ item }}"
        key: "{{ lookup('file', pubkey_path) }}"
      loop: [root, "{{ credentials_user }}"]
      # NOTE: SSH connection setup is done only if ansible_connection == 'ssh'.
      # The main use case for this configuration is to setup main local machine.
      # Do not set up ssh access for local connection (i.e. my main machine) to avoid security risks.
      when: pubkey_check.stat.exists and ansible_connection == "ssh"

- name: Setup credentials for {{ credentials_user }}
  vars:
    credentials_map_path: "{{ playbook_dir }}/roles/credentials/vars/credentials_map.yaml"
  no_log: true
  block:
    - name: Check if credentials are decrypted locally
      delegate_to: localhost
      ansible.builtin.stat:
        path: "{{ credentials_map_path }}"
      register: credentials_map_status

    - name: Load decrypted credentials
      ansible.builtin.include_vars:
        file: "{{ credentials_map_path }}"
      when: credentials_map_status.stat.exists

    - name: Emit warning if we use SSH connection, but credentials are not decrypted
      ansible.builtin.fail:
        msg: "Warning: credentials are not decrypted for ssh connection.\n
          This will probably lead to privilege escalation issues later."
      when: not credentials_map_status.stat.exists and ansible_connection == "ssh"
      failed_when: false

    - name: Get host credentials
      ansible.builtin.set_fact:
        credentials_hashed_password: "{{ creds_user_conf.password | password_hash(salt=creds_user_conf.salt) }}"
        credentials_password: "{{ creds_user_conf.password }}"
      vars:
        credentials_kind: "{{ hostvars[inventory_hostname].credentials_kind | default('default_kind') }}"
        credentials_host: "{{ credentials_map[credentials_kind] }}"
        creds_user_conf: "{{ (credentials_host[credentials_user] | default(credentials_host.default_user)) }}"
      when: credentials_map_status.stat.exists

    - name: Set password for {{ credentials_user }}
      become: true
      ansible.builtin.user:
        name: "{{ credentials_user }}"
        password: "{{ credentials_hashed_password }}"
      when: credentials_map_status.stat.exists

    - name: Set ansible_sudo_pass
      ansible.builtin.set_fact:
        ansible_sudo_pass: "{{ credentials_password }}"
      when: credentials_map_status.stat.exists and credentials_user == ansible_user

- name: Setup passwordless sudo for {{ credentials_user }}
  become: true
  # There are two cases when we need to setup passwordless sudo:
  # 1. When we use ansible container connection, since it does not support password-full privileges escalation
  #     See https://github.com/ansible/ansible/issues/80254
  # 2. If setting up local user without decrypted secrets.
  #    The main use case is the CI usage, where we do not have decrypted passwords.
  #    This, however, creates a security risk for local scenarios.
  #    We will workaround it by removing passwordless sudo in the next task when
  #    credentials are decrypted.
  # 3. There is also a potential third scenario, when we setup SSH connection,
  #    but do not have decrypted credentials.
  #    Setting up passwordless sudo in this case is a critical security issue,
  #    so we do not do it here. Instead, expect privilege escalation errors later.
  when: (ansible_connection in ["docker", "podman"]) or
    (ansible_connection == "local" and not credentials_map_status.stat.exists)
  ansible.builtin.copy:
    dest: /etc/sudoers.d/{{ credentials_user }}-ansible-sudo
    content: "{{ credentials_user }} ALL=(ALL) NOPASSWD:ALL"
    mode: "0o440"

- name: Remove passwordless sudo for local connection for {{ credentials_user }}
  become: true
  when: ansible_connection == "local" and credentials_map_status.stat.exists
  ansible.builtin.file:
    path: /etc/sudoers.d/{{ credentials_user }}-ansible-sudo
    state: absent
