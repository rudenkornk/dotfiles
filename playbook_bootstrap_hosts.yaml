# This playbook is meant to be used as a very initial machine bootstrap
# It is assumed that after this playbook is ran, the user will be able use a "normal" ansible playbook
# with enabled gather_facts, installed python and ssh connection for the target user with admin privileges

- name: Bootstrap hosts
  hosts: "{{ hosts_var }}"
  vars:
    ansible_user: root
  # We are setting up almost vanilla machine, which does not even have python installed
  # Thus, we must disable gather_facts
  gather_facts: false
  tasks:
    # /etc/os-release actually has well-defined structure we can rely on
    # See https://www.linux.org/docs/man5/os-release.html
    - name: Detect distribution
      ansible.builtin.raw: grep -oP '^ID=\K.*' /etc/os-release | sed -e 's/\(.*\)/\L\1/' | sed 's/\([[:alpha:]]\)/\U\1/'
      args:
        executable: bash
      register: distro
      changed_when: false

    - name: Set ansible_distribution fact
      ansible.builtin.set_fact:
        ansible_distribution: "{{ distro.stdout_lines[0] }}"

    - name: Install python
      become: true
      ansible.builtin.raw: |
        if ! command -v python3 &> /dev/null; then \
          if [[ {{ ansible_distribution }} == "Ubuntu" ]]; then \
            apt-get update && \
            DEBIAN_FRONTEND=noninteractive \
            apt-get install -y python3; \
          elif [[ {{ ansible_distribution }} == "Fedora" ]]; then \
            dnf install -y python3; \
          else \
            exit 1; \
          fi && \
          echo "bootstrapped";
        fi
      args:
        executable: bash
      register: bootstrap
      changed_when: ("bootstrapped" in bootstrap.stdout)

    - name: Install sudo
      become: true
      ansible.builtin.package:
        name: sudo

    # This config supports three kinds of ansible_connection: ssh, docker/podman and local.
    # In order to use them, we have to properly setup authentication methods for all of them.
    # For ssh connection we have to setup authorized_keys to connect and password to be able to escalate privileges
    # For docker/podman we have to setup an empty password
    # (see https://github.com/ansible/ansible/issues/80254)
    # Local connection is out of scope of the playbook.

    - name: Add authorized_key for ssh connection
      when: ansible_connection == "ssh"
      vars:
        pubkey_path: "{{ playbook_dir }}/roles/ssh_client/files/keys/id_rsa.pub"
      block:
        - name: Check if public SSH key is decrypted
          delegate_to: localhost
          ansible.builtin.stat:
            path: "{{ pubkey_path }}"
          register: pubkey_check

        - name: Check hostname matches entry in ansible/hosts
          ansible.builtin.fail:
            msg: "Warning: public key not decrypted for ssh connection: {{ pubkey_path }}"
          when: not pubkey_check.stat.exists
          failed_when: false

        - name: Add authorized_key for ssh connection
          become: true
          ansible.posix.authorized_key:
            user: "{{ item }}"
            key: "{{ lookup('file', pubkey_path) }}"
          loop: [root, "{{ user }}"]
          when: pubkey_check.stat.exists

    # Sets up creds for SSH and container connections
    # For some weird reason password setup must come before adding admin groups
    - name: Include credentials setup tasks
      vars:
        credentials_user: "{{ user }}"
      ansible.builtin.include_tasks:
        file: "{{ playbook_dir }}/roles/credentials/tasks/main.yaml"

    - name: Add authorized_key for ssh connection
      when: ansible_connection == "ssh"
      vars:
        pubkey_path: "{{ playbook_dir }}/roles/ssh_client/files/keys/id_rsa.pub"
      block:
        - name: Check if public SSH key is decrypted
          delegate_to: localhost
          ansible.builtin.stat:
            path: "{{ pubkey_path }}"
          register: pubkey_check

        - name: Check hostname matches entry in ansible/hosts
          ansible.builtin.fail:
            msg: "Warning: public key not decrypted for ssh connection: {{ pubkey_path }}"
          when: not pubkey_check.stat.exists
          failed_when: false

        - name: Add authorized_key for ssh connection
          become: true
          ansible.posix.authorized_key:
            user: "{{ item }}"
            key: "{{ lookup('file', pubkey_path) }}"
          loop: [root, "{{ user }}"]
          when: pubkey_check.stat.exists

        - name: Include credentials setup tasks
          vars:
            credentials_user: "{{ user }}"
          ansible.builtin.include_tasks:
            file: "{{ playbook_dir }}/roles/credentials/tasks/main.yaml"

    - name: Append admin groups for {{ user }}
      become: true
      ansible.builtin.user:
        name: "{{ user }}"
        groups:
          - adm
          - "{{ {'Ubuntu': 'sudo', 'Fedora': 'wheel'}[ansible_distribution] }}"
        append: true
