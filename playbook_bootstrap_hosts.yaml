# This playbook is meant to be used as a very initial machine bootstrap
# It is assumed that after this playbook is ran, the user will be able use a "normal" ansible playbook
# with enabled gather_facts, installed python and ssh connection for the target user with admin privileges

- name: Bootstrap hosts
  hosts: "{{ hosts_var }}"
  vars:
    ansible_user: root
  # We are setting up almost vanilla machine, which does not even have python installed
  # Thus, we must disable gather_facts
  gather_facts: false
  tasks:
    # /etc/os-release actually has well-defined structure we can rely on
    # See https://www.linux.org/docs/man5/os-release.html
    - name: Detect distribution
      ansible.builtin.raw: grep -oP '^ID=\K.*' /etc/os-release | sed -e 's/\(.*\)/\L\1/' | sed 's/\([[:alpha:]]\)/\U\1/'
      args:
        executable: bash
      register: distro
      changed_when: false

    - name: Set ansible_distribution fact
      ansible.builtin.set_fact:
        ansible_distribution: "{{ distro.stdout_lines[0] }}"

    - name: Install python
      become: true
      ansible.builtin.raw: |
        if ! command -v python3 &> /dev/null; then \
          if [[ {{ ansible_distribution }} == "Ubuntu" ]]; then \
            apt-get update && \
            DEBIAN_FRONTEND=noninteractive \
            apt-get install -y python3; \
          elif [[ {{ ansible_distribution }} == "Fedora" ]]; then \
            dnf install -y python3; \
          else \
            exit 1; \
          fi && \
          echo "bootstrapped";
        fi
      args:
        executable: bash
      register: bootstrap
      changed_when: ("bootstrapped" in bootstrap.stdout)

    - name: Install sudo
      become: true
      ansible.builtin.package:
        name: sudo

    - name: Set correct credentials for {{ user }}
      ansible.builtin.include_tasks:
        file: "roles/credentials/tasks/main.yaml"
      vars:
        secrets_user: "{{ user }}"

    - name: Append admin groups for {{ user }}
      become: true
      ansible.builtin.user:
        name: "{{ user }}"
        groups:
          - adm
          - "{{ {'Ubuntu': 'sudo', 'Fedora': 'wheel'}[ansible_distribution] }}"
        append: true

    - name: Add authorized_key for {{ user }}
      when: ansible_connection == "ssh"
      block:
        - name: Load ssh keys paths
          ansible.builtin.include_vars:
            file: "{{ playbook_dir }}/roles/ssh_client/vars/local.yaml"

        - name: Add authorized_key for {{ user }}
          become: true
          ansible.posix.authorized_key:
            user: "{{ user }}"
            key: "{{ lookup('file', '{{ ssh_client_local_path }}/id_rsa.pub') }}"
