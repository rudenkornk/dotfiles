- name: Add eza gpg key (for Ubuntu < 24.04)
  become: true
  ansible.builtin.get_url:
    url: "{{ shell_utils_eza_gpg }}"
    dest: "{{ apt_keys }}/eza.asc"
    mode: "0o644"
  retries: "{{ web_retries }}"
  delay: "{{ web_delay }}"
  register: shell_utils_installed
  until: shell_utils_installed is not failed
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version is version('24.04', '<')

- name: Add gierens repo (for Ubuntu < 24.04)
  become: true
  ansible.builtin.apt_repository:
    repo: deb [arch={{ deb_arch }} signed-by={{ apt_keys }}/eza.asc] {{ shell_utils_gierens_repo }}
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version is version('24.04', '<')

- name: Install eza, fd, bat, zoxide, hexyl, jq and moreutils
  become: true
  ansible.builtin.package:
    name:
      - bat
      - eza
      - fd-find
      - hexyl
      - jq
      - moreutils
      - ripgrep
      - zoxide

- name: Setup yazi
  vars:
    shell_utils_yazi_fullname: "{{ manifest.yazi.url | split('/') | last | split('.') | first }}"
    shell_utils_yazi_fullpath: "{{ home }}/.local/{{ shell_utils_yazi_fullname }}"
    shell_utils_yazi_path: "{{ home }}/.local/bin/yazi_dir"
  block:
    - name: Download yazi
      ansible.builtin.unarchive:
        src: "{{ manifest.yazi.url }}"
        dest: "{{ home }}/.local/"
        remote_src: true
      retries: "{{ web_retries }}"
      delay: "{{ web_delay }}"
      register: shell_utils_downloaded
      until: shell_utils_downloaded is not failed

    - name: Create symlink to yazi fullpath
      ansible.builtin.file:
        src: "{{ shell_utils_yazi_fullpath }}"
        dest: "{{ shell_utils_yazi_path }}"
        state: link

    - name: Create symlinks to yazi binaries
      ansible.builtin.file:
        src: "{{ shell_utils_yazi_fullpath }}/{{ item }}"
        dest: "{{ home }}/.local/bin/{{ item }}"
        state: link
      loop: [ya, yazi]

    - name: Create symlink to yazi configs
      ansible.builtin.file:
        src: "{{ role_host_path }}/files/yazi"
        dest: "{{ home }}/.config/yazi"
        state: link

    - name: Install more utils for yazi
      become: true
      ansible.builtin.package:
        name:
          - file
          - poppler-utils
          - poppler-data
          - unar

- name: Create symlink to fd on Ubuntu
  ansible.builtin.file:
    src: "/usr/bin/fdfind"
    dest: "{{ home }}/.local/bin/fd"
    state: link
  when: ansible_distribution == "Ubuntu"

- name: Create symlink to bat on Ubuntu
  ansible.builtin.file:
    src: "/usr/bin/batcat"
    dest: "{{ home }}/.local/bin/bat"
    state: link
  when: ansible_distribution == "Ubuntu"

- name: Download fzf
  ansible.builtin.git:
    repo: "{{ manifest.fzf.url }}"
    dest: "{{ home }}/.fzf"
    version: "{{ manifest.fzf.version }}"
  register: shell_utils_fzf_download
  retries: "{{ web_retries }}"
  delay: "{{ web_delay }}"
  until: shell_utils_fzf_download is not failed

- name: Install fzf
  ansible.builtin.shell: |
    # Installing fish completion here will break custom settings
    # of the patrickf1/fzf.fish plugin
    "{{ home }}"/.fzf/install --all --no-fish
  changed_when: shell_utils_fzf_download is changed

- name: Download fisher
  ansible.builtin.get_url:
    url: https://git.io/fisher
    dest: "{{ home }}/.config/fish/functions/fisher.fish"
    mode: "0o755"
  retries: "{{ web_retries }}"
  delay: "{{ web_delay }}"
  register: shell_utils_downloaded
  until: shell_utils_downloaded is not failed

- name: Create symlink to fish_plugins
  ansible.builtin.file:
    src: "{{ role_host_path }}/files/fish_plugins"
    dest: "{{ home }}/.config/fish/fish_plugins"
    state: link

- name: Install fisher plugins
  ansible.builtin.shell: |
    set -o pipefail
    set -x TERM xterm-256color
    fisher update
    echo 1 1 1 2 3 1 1 2 y | tide configure
  args:
    executable: fish
  changed_when: false

- name: Create symlink to cmd.exe
  ansible.builtin.file:
    src: "/mnt/c/Windows/System32/cmd.exe"
    dest: "{{ home }}/.local/bin/cmd.exe"
    state: link
  when: in_wsl

- name: Set up bash
  ansible.builtin.lineinfile:
    path: "{{ home }}/.bashrc"
    regexp: "source .*/{{ role_name }}/files"
    line: source {{ role_host_path }}/files/bash.sh

- name: Create symlink to fish config of {{ role_name }}
  ansible.builtin.file:
    src: "{{ role_host_path }}/files/{{ role_name }}.fish"
    dest: "{{ home }}/.config/fish/conf.d/{{ role_name }}.fish"
    state: link

- name: Create symlinks to fish functions
  ansible.builtin.file:
    src: "{{ role_host_path }}/files/fish_functions/{{ item | basename }}"
    dest: "{{ home }}/.config/fish/functions/{{ item | basename }}"
    state: link
  loop: "{{ lookup('fileglob', '{{ role_path }}/files/fish_functions/*', wantlist=True) }}"
  register: shell_utils_functions

# git diff -p --no-index --no-prefix -- a/functions/ b/functions/ >
# ~/projects/dotfiles/roles/shell_utils/files/fzf.fish.patch
- name: Patch fzf - fix focus events and add ripgrep support
  ansible.posix.patch:
    src: "{{ role_path }}/files/fzf.fish.patch"
    basedir: "{{ home }}/.config/fish"
    strip: 1
  changed_when: shell_utils_functions is changed

- name: Configure fzf key bindings
  # C-a beginning of the line
  # C-b one char backwards
  # C-c interrupt process
  # C-d delete one char
  # C-e end of the line
  # C-f one char forward
  # C-g fzf git log
  # C-h goto left window
  # C-i show suggestions
  # C-j goto lower window
  # C-k goto upper window
  # C-l goto right window
  # C-m enter
  # C-n next history command
  # C-o fzf git status
  # C-p previous history command
  # C-q fzf search files with ripgrep
  # C-r fzf command history
  # C-s tmux reserved
  # C-t fzf search files
  # C-u delete all to the left
  # C-v fzf search variables
  # C-w delete one word to the left
  # C-x fzf search processes (previously copy fish command)
  # C-y fzf yazi
  # C-z undo
  ansible.builtin.lineinfile:
    path: "{{ home }}/.config/fish/functions/fish_user_key_bindings.fish"
    regexp: "fzf_configure_bindings"
    # Be aware that single-line yaml must not contain additional indents, otherwise it will be treated as newline.
    line: >
      fzf_configure_bindings
      --directory=\ct
      --git_log=\cg
      --git_status=\co
      --history=\cr
      --processes=\cx
      --variables=\cv
      --files=\cq
      --yazi=\cy
    create: true
    mode: "0o644"
