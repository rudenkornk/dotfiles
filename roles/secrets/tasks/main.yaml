- name: Check if gpg key is installed
  ansible.builtin.shell: |
    set -o pipefail
    gpg --list-secret-keys | grep {{ profile.gpg_email }} --quiet && echo "secret key imported" || true
  args:
    executable: bash
  register: gpg_imported
  changed_when: false

- name: Import gpg key
  block:
    - name: Copy gpg key
      ansible.builtin.copy:
        src: "{{ gpg_key }}"
        dest: "{{ dotfiles_tmp }}/private.gpg"
        mode: 0600

    - name: Import gpg key
      ansible.builtin.shell: |
        gpg --import "{{ dotfiles_tmp }}/private.gpg" 2>&1
      args:
        executable: bash
      register: gpg_imported_now
      changed_when: >
        ("secret key imported" in gpg_imported_now.stdout) and ("secret keys unchanged" not in gpg_imported_now.stdout)
  when: ("secret key imported" not in gpg_imported.stdout) and (gpg_key != "")

- name: Decrypt git secrets
  ansible.builtin.shell: |
    git secret reveal -f
    git secret list | xargs chmod 600
  args:
    chdir: "{{ dotfiles_path }}"
  when: ("secret key imported" in gpg_imported.stdout) or (gpg_imported_now is not skipped)
  changed_when: false
  tags:
    - skip_ansible_lint

# See https://github.com/ansible/ansible/issues/80254
- name: Do not set credentials in containers
  ansible.builtin.file:
    path: "{{ credentials_path }}"
    state: absent
  when: in_container
  changed_when: false

- name: Check if credentials were decrypted
  ansible.builtin.stat:
    path: "{{ credentials_path }}"
  register: creds_status

- name: Read credentials
  ansible.builtin.slurp:
    src: "{{ credentials_path }}"
  register: encoded_creds
  when: creds_status.stat.exists

- name: Update user credentials after secrets decryption
  # This block is to preserve idempotence
  block:
    - name: Update user password
      become: true
      ansible.builtin.user:
        name: "{{ ansible_user }}"
        password: "{{ creds.password | password_hash(salt=creds.salt) }}"

    - name: Set ansible_sudo_pass
      ansible.builtin.set_fact:
        ansible_sudo_pass: "{{ creds.password }}"
      no_log: true
  vars:
    creds: "{{ encoded_creds['content'] | b64decode | from_json }}"
  when: creds_status.stat.exists
