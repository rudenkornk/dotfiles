- name: Install lua
  become: true
  ansible.builtin.package:
    name:
      - "{{ {'Ubuntu': 'liblua' + lua_version + '-dev', 'Fedora': 'lua-libs'}[ansible_distribution] }}"
      - "{{ {'Ubuntu': 'lua' + lua_version, 'Fedora': 'lua-devel'}[ansible_distribution] }}"
      - lua-filesystem

- name: Download luarocks
  ansible.builtin.unarchive:
    src: "{{ lua_rocks_url }}"
    dest: "{{ dotfiles_host_tmp }}"
    remote_src: true
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  retries: "{{ web_retries }}"
  delay: "{{ web_delay }}"
  register: lua_downloaded
  until: lua_downloaded is not failed

- name: Compile luarocks
  ansible.builtin.shell: |
    set -o pipefail
    current_version=$(luarocks --version 2>&1 | grep --perl-regexp --only-matching "\d+\.\d+\.\d+" || true)
    if [[ "{{ lua_rocks_version }}" != "$current_version" ]]; then
      ./configure
      make
    else
      echo true
    fi
  args:
    executable: bash
    chdir: "{{ dotfiles_host_tmp }}/luarocks-{{ lua_rocks_version }}"
  changed_when: lua_rocks_matches.stdout != "true"
  register: lua_rocks_matches

- name: Install luarocks
  become: true
  ansible.builtin.shell: |
    set -o pipefail
    current_version=$(luarocks --version 2>&1 | grep --perl-regexp --only-matching "\d+\.\d+\.\d+" || true)
    if [[ "{{ lua_rocks_version }}" != "$current_version" ]]; then
      make install
    fi
  args:
    executable: bash
    chdir: "{{ dotfiles_host_tmp }}/luarocks-{{ lua_rocks_version }}"
  changed_when: lua_rocks_matches.stdout != "true"

- name: Install luarocks completions
  ansible.builtin.shell: |
    luarocks completion bash > {{ home }}/.local/share/bash-completion/completions/luarocks
    luarocks completion fish > {{ home }}/.config/fish/completions/luarocks.fish
  args:
    executable: bash
  changed_when: false

- name: Create lua.fish config
  ansible.builtin.template:
    src: lua.fish
    dest: "{{ home }}/.config/fish/conf.d/lua.fish"
    mode: "0o644"

- name: Install python3-lupa
  become: true
  ansible.builtin.package:
    name: python3-lupa

- name: Install luasec
  become: true
  ansible.builtin.shell: |
    set -o pipefail
    if ! luarocks list luasec | grep --quiet "(installed)"; then
      luarocks install luasec
    fi
  args:
    executable: bash
  register: lua_installed
  changed_when: lua_installed.stdout != ""

- name: Install luafilesystem
  become: true
  ansible.builtin.shell: |
    set -o pipefail
    if ! luarocks list luafilesystem | grep --quiet "(installed)"; then
      luarocks install luafilesystem
    fi
  args:
    executable: bash
  register: lua_installed
  changed_when: lua_installed.stdout != ""

- name: Install json4Lua
  become: true
  ansible.builtin.shell: |
    set -o pipefail
    if ! luarocks list json4Lua | grep --quiet "(installed)"; then
      luarocks install --server=http://rocks.moonscript.org/manifests/amrhassan json4Lua
    fi
  args:
    executable: bash
  register: lua_installed
  changed_when: lua_installed.stdout != ""

- name: Install jsregexp
  become: true
  ansible.builtin.shell: |
    set -o pipefail
    if ! luarocks list jsre  | grep --quiet "(installed)"; then
      luarocks install jsregexp
    fi
  args:
    executable: bash
  register: lua_installed
  changed_when: lua_installed.stdout != ""

- name: Install stylua
  ansible.builtin.unarchive:
    src: "{{ manifest.stylua.url }}"
    dest: "{{ home }}/.local/bin"
    remote_src: true
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  retries: "{{ web_retries }}"
  delay: "{{ web_delay }}"
  register: lua_downloaded
  until: lua_downloaded is not failed

- name: Create ~/.config/luacheck directory
  ansible.builtin.file:
    path: "{{ home }}/.config/luacheck"
    state: directory
    mode: "0o755"

# https://luacheck.readthedocs.io/en/stable/config.html#configuration-file
- name: Create symlink to global luacheck config
  ansible.builtin.file:
    src: "{{ role_host_path }}/files/luacheckrc"
    dest: "{{ home }}/.config/luacheck/.luacheckrc"
    state: link
