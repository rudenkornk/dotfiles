- name: Load local secrets vars
  ansible.builtin.include_vars:
    file: local.yaml

# About "trusted" working:
#
# There are two kinds of secrets: local and host (aka remote).
# Local secrets are used directly as arguments of some Ansible tasks and thus
# they have to be decrypted on the controlling machine.
# Remote secrets, as the name suggests, must be decrypted and presented on the remote machine.
# Remote secrets are usually meant as more sensitive than local ones,
# and are only decrypted if the remote machine is "trusted".
# Local secrets on the other hand, are less sensitive.
# They can be used for or put to the remote machine even if it is not trusted.
#
# Examples of local secrets:
# - Target user password on the remote host. It does not need to be actually presented on the remote host,
#   but in order to set it, it must be decrypted on the controlling machine.
# - SSH public key to set it in ~/.ssh/authorized_keys on the remote host.
#   Though it is physically will be presented on the remote host,
#   it is not really sensitive and is also needed as an argument for authorized_key ansible task.
# - SSH port to set for SSH connection to the remote host.
#
# Examples of remote secrets:
# - Private SSH keys put in ~/.ssh folder on the remote host.
# - VPN and proxy configs.
# - GPG keys.
#
# This role is mostly a "remote secrets" role, i.e. it decrypts sensitive secrets on the remote machine,
# and it does so only for the "trusted" hosts.
# In local scenarios it acts both as local and remote secrets decryptor.
# This allows to configure local machine in one go.

- name: Check if gpg key is installed
  ansible.builtin.shell: |
    set -o pipefail
    gpg --list-secret-keys | grep {{ profile.gpg_email }} --quiet && echo "secret key imported" || true
  args:
    executable: bash
  register: secrets_gpg_imported
  changed_when: false

- name: Try export gpg key
  delegate_to: localhost
  when: ("secret key imported" not in secrets_gpg_imported.stdout) and trusted
  block:
    - name: Try export gpg key
      ansible.builtin.command:
        cmd: gpg --output "{{ secrets_gpg_key_local_path }}" --armor --export-secret-key {{ profile.gpg_email }}
        creates: "{{ secrets_gpg_key_local_path }}"
      ignore_errors: true
      changed_when: secrets_gpg_exported.stderr == ""
      register: secrets_gpg_exported

    - name: Check if gpg key exported
      ansible.builtin.stat:
        path: "{{ secrets_gpg_key_local_path }}"
      register: secrets_gpg_key

- name: Import gpg key
  when: >
    ("secret key imported" not in secrets_gpg_imported.stdout) and trusted and
    secrets_gpg_key.stat.exists and secrets_gpg_key.stat.readable
  block:
    - name: Copy gpg key
      ansible.builtin.copy:
        src: "{{ secrets_gpg_key_local_path }}"
        dest: "{{ secrets_gpg_key_host_path }}"
        mode: "0o600"

    - name: Import gpg key
      ansible.builtin.shell: |
        gpg --import "{{ secrets_gpg_key_host_path }}" 2>&1
      args:
        executable: bash
      register: secrets_gpg_imported_now
      changed_when: >
        ("secret key imported" in secrets_gpg_imported_now.stdout) and
        ("secret keys unchanged" not in secrets_gpg_imported_now.stdout)

- name: Decrypt git secrets
  ansible.builtin.shell: |
    set -o pipefail
    git secret reveal -f
    chmod 700 .gitsecret/keys
    git secret list | xargs chmod 600
  args:
    executable: bash
    chdir: "{{ dotfiles_host_path }}"
  when: ("secret key imported" in secrets_gpg_imported.stdout) or (secrets_gpg_imported_now is not skipped)
  changed_when: false

- name: Create ~/.config/dotfiles-proxy directory
  ansible.builtin.file:
    path: "{{ home }}/.config/dotfiles-proxy"
    state: directory
    mode: "0o755"

- name: Check if proxy.auth file is decrypted
  ansible.builtin.stat:
    path: "{{ secrets_proxy_host_path }}"
  register: secrets_proxy

- name: Create symlink to proxy.auth
  ansible.builtin.file:
    src: "{{ secrets_proxy_host_path }}"
    dest: "{{ home }}/.config/dotfiles-proxy/proxy.auth"
    state: link
  when: secrets_proxy.stat.exists

- name: Install ldap client
  become: true
  ansible.builtin.package:
    name:
      - "{{ {'Ubuntu': 'ldap-utils', 'Fedora': 'openldap-clients'}[ansible_distribution] }}"

- name: Create ~/.config/ldap directory
  ansible.builtin.file:
    path: "{{ home }}/.config/ldap"
    state: directory
    mode: "0o755"

- name: Check if ldap creds decrypted
  ansible.builtin.stat:
    path: "{{ role_host_path }}/files/{{ item }}"
  register: secrets_ldap_creds
  loop: ["ldap_pass.auth", "ldap_user.auth", "ldap_server.auth", "ldap_domain.auth"]

- name: Create symlink to ldap creds
  ansible.builtin.file:
    src: "{{ role_host_path }}/files/{{ item }}"
    dest: "{{ home }}/.config/ldap/{{ item }}"
    state: link
  loop: ["ldap_pass.auth", "ldap_user.auth", "ldap_server.auth", "ldap_domain.auth"]
  when: (secrets_ldap_creds.results | selectattr("item", "equalto", item) | first).stat.exists

- name: Set up bash
  ansible.builtin.lineinfile:
    path: "{{ home }}/.bashrc"
    regexp: "source .*/{{ role_name }}/files"
    line: source {{ role_host_path }}/files/bash.sh

- name: Create symlinks to fish functions
  ansible.builtin.file:
    src: "{{ role_host_path }}/files/fish_functions/{{ item | basename }}"
    dest: "{{ home }}/.config/fish/functions/{{ item | basename }}"
    state: link
  loop: "{{ lookup('fileglob', '{{ role_path }}/files/fish_functions/*', wantlist=True) }}"
  register: shell_utils_functions
