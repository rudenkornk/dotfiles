- name: Check if credentials are decrypted locally
  delegate_to: localhost
  ansible.builtin.stat:
    path: "{{ playbook_dir }}/roles/credentials/vars/credentials_map.yaml"
  register: credentials_vars_status

- name: Check if inside container
  ansible.builtin.shell: ([[ -f /.dockerenv || -f /run/.containerenv ]]) && echo true || echo false
  args:
    executable: bash
  changed_when: false
  register: credentials_container_out

- name: Set in_container status
  ansible.builtin.set_fact:
    in_container: "{{ credentials_container_out.stdout }}"

- name: Set credentials
  # Do not set credentials for containers
  # See https://github.com/ansible/ansible/issues/80254
  # This issue is relevant in case `ansible_connection in ('docker', 'podman')`
  #
  # However, there is also one more scenario when we need to set empty password in container.
  # That is a CI check, where CI system prepares container for us and ansible uses local connection.
  # Since we do not have decrypted passwords in CI, we need to set empty password there.
  # Thus, we check for the real container presence, not ansible_connection.
  when: credentials_vars_status.stat.exists and not in_container
  block:
    - name: Load decrypted credentials
      ansible.builtin.include_vars:
        file: "{{ playbook_dir }}/roles/credentials/vars/credentials_map.yaml"

    - name: Get host credentials
      ansible.builtin.set_fact:
        credentials_hashed_password: "{{ creds_user_conf.password | password_hash(salt=creds_user_conf.salt) }}"
        credentials_password: "{{ creds_user_conf.password }}"
      vars:
        credentials_kind: "{{ hostvars[inventory_hostname].credentials_kind | default('default_kind') }}"
        credentials_host: "{{ credentials_map[credentials_kind] }}"
        creds_user_conf: "{{ (credentials_host[credentials_user] | default(credentials_host.default_user)) }}"
      no_log: true

    - name: Set password for {{ credentials_user }}
      become: true
      ansible.builtin.user:
        name: "{{ credentials_user }}"
        password: "{{ credentials_hashed_password }}"

    - name: Set ansible_sudo_pass
      ansible.builtin.set_fact:
        ansible_sudo_pass: "{{ credentials_password }}"
      no_log: true
      when: credentials_user == ansible_user

- name: Set credentials in container
  when: in_container
  block:
    - name: Set empty password if container connections
      when: in_container
      ansible.builtin.user:
        name: "{{ credentials_user }}"
        password: ""

    - name: Set ansible_sudo_pass
      ansible.builtin.set_fact:
        ansible_sudo_pass: ""
      when: credentials_user == ansible_user
