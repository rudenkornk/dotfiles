# See https://docs.docker.com/engine/install/ubuntu/
- name: Uninstall legacy packages on Ubuntu
  become: true
  ansible.builtin.apt:
    name:
      - containerd
      - docker-compose
      - docker-compose-v2
      - docker-doc
      - docker.io
      - podman-docker
      - runc
    state: absent
  when: ansible_distribution == "Ubuntu"

# See https://docs.docker.com/engine/install/fedora/
- name: Uninstall legacy packages on Fedora
  become: true
  ansible.builtin.dnf:
    name:
      - docker-client
      - docker-client-latest
      - docker-common
      - docker-latest
      - docker-latest-logrotate
      - docker-logrotate
      - docker-engine-selinux
      - docker-engine
    state: absent
  when: ansible_distribution == "Fedora"

- name: Add docker gpg key on Ubuntu
  become: true
  ansible.builtin.get_url:
    url: "{{ docker_gpg }}"
    dest: "{{ apt_keys }}/docker.asc"
    mode: "0o644"
  retries: "{{ web_retries }}"
  delay: "{{ web_delay }}"
  register: docker_installed
  until: docker_installed is not failed
  when: ansible_distribution == "Ubuntu"

- name: Add docker repository on Ubuntu
  become: true
  ansible.builtin.apt_repository:
    repo: deb [arch={{ deb_arch }} signed-by={{ apt_keys }}/docker.asc] {{ docker_repo }}
  when: ansible_distribution == "Ubuntu"

- name: Add docker repository on Fedora
  become: true
  ansible.builtin.yum_repository:
    name: docker-ce-stable
    description: "Docker CE Stable - $basearch"
    baseurl: "{{ docker_fedora_repo }}"
    enabled: true
    gpgcheck: true
    gpgkey: "{{ docker_fedora_gpg }}"
  when: ansible_distribution == "Fedora"

- name: Install docker
  become: true
  ansible.builtin.package:
    name:
      - containerd.io
      - docker-buildx-plugin
      - docker-ce
      - docker-ce-cli
      - docker-compose-plugin

- name: Create /etc/docker dir
  become: true
  ansible.builtin.file:
    path: "/etc/docker"
    state: directory
    mode: "0o755"

- name: Check if daemon.json is decrypted locally
  delegate_to: localhost
  ansible.builtin.stat:
    path: "{{ role_path }}/files/daemon.json"
  register: docker_daemon_json

- name: Copy daemon.json
  become: true
  ansible.builtin.copy:
    src: "{{ role_path }}/files/daemon.json"
    dest: "/etc/docker/daemon.json"
    mode: "0o644"
  when: docker_daemon_json.stat.exists

- name: Add to docker group {{ ansible_user }}
  become: true
  ansible.builtin.user:
    name: "{{ ansible_user }}"
    groups: docker
    append: true

- name: Create ~/.docker dir
  ansible.builtin.file:
    path: "{{ home }}/.docker"
    state: directory
    mode: "0o755"

- name: Install jq and sponge
  become: true
  ansible.builtin.package:
    name:
      - jq
      - moreutils

- name: Create ~/.docker/config.json
  ansible.builtin.shell: |
    set -o pipefail
    config={{ home }}/.docker/config.json
    if [[ ! -f $config || ! -s $config ]]; then
      echo "{}" > $config
    fi
    # Do not create symbolic because it might be populated with docker credentials
    jq -s '.[0] * .[1]' "{{ role_host_path }}/files/config.json" "$config" | sponge $config
  args:
    executable: bash
  changed_when: false

- name: Install fish completions
  ansible.builtin.get_url:
    url: "{{ docker_fish_url }}"
    dest: "{{ home }}/.config/fish/completions/docker.fish"
    mode: "0o755"
    force: true
  retries: "{{ web_retries }}"
  delay: "{{ web_delay }}"
  register: docker_downloaded
  until: docker_downloaded is not failed

- name: Set up bash
  ansible.builtin.lineinfile:
    path: "{{ home }}/.bashrc"
    regexp: "source .*/{{ role_name }}/files"
    line: source {{ role_host_path }}/files/bash.sh

- name: Create symlinks to fish functions
  ansible.builtin.file:
    src: "{{ role_host_path }}/files/fish_functions/{{ item | basename }}"
    dest: "{{ home }}/.config/fish/functions/{{ item | basename }}"
    state: link
  loop: "{{ lookup('fileglob', '{{ role_path }}/files/fish_functions/*', wantlist=True) }}"
