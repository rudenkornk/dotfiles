- name: Install neovim
  become: true
  ansible.builtin.apt:
    deb: "{{ manifest.neovim.url }}"
  retries: "{{ web_retries }}"
  delay: "{{ web_delay }}"
  register: installed
  until: installed is not failed

- name: Install vim as a backup
  become: true
  ansible.builtin.apt:
    name: vim

- name: Install neovim gem
  become: true
  ansible.builtin.apt:
    name: ruby-neovim

- name: Install python packages
  become: true
  ansible.builtin.apt:
    name:
      - python3-pynvim
      - python3-sympy

- name: Install node.js packages
  become: true
  community.general.npm:
    name: "{{ item }}"
    global: true
  loop:
    - neovim
    - npm-groovy-lint

- name: Install tree-sitter-cli
  ansible.builtin.shell: |
    {{ home }}/.cargo/bin/cargo install tree-sitter-cli 2>&1
  args:
    executable: bash
  register: status
  retries: "{{ web_retries }}"
  delay: "{{ web_delay }}"
  until: status is not failed
  changed_when: "'already installed' not in status.stdout"

- name: Install NvChad 1
  block:
    - name: Install NvChad
      ansible.builtin.git:
        repo: "{{ manifest.nvchad.url }}"
        dest: "{{ nvim_base }}_1/config"
        version: "{{ manifest.nvchad.version }}"
        force: true
      register: nvchad_installed
      retries: "{{ web_retries }}"
      delay: "{{ web_delay }}"
      until: nvchad_installed is not failed
      changed_when: nvchad_installed.before != nvchad_installed.after

    - name: Patch NvChad - add plugin version pinning check
      ansible.posix.patch:
        src: "{{ role_path }}/files/nvchad/nvchad.patch"
        basedir: "{{ nvim_base }}_1/config"
        strip: 1
        state: present
      changed_when: nvchad_installed.before != nvchad_installed.after

    - name: Create symlink to NvChad config
      ansible.builtin.file:
        src: "{{ remote_role_path }}/files/nvchad"
        dest: "{{ nvim_base }}_1/config/lua/custom"
        state: link

    - name: Create neovim keymap directory
      ansible.builtin.file:
        path: "{{ nvim_base }}_1/config/keymap"
        state: directory
        mode: 0755

    - name: Create symlink to rnk keymap
      ansible.builtin.file:
        src: "{{ dotfiles_path }}/roles/keyboard_layouts/files/rnk-qwerty-jcuken.vim"
        dest: "{{ nvim_base }}_1/config/keymap/rnk-qwerty-jcuken.vim"
        state: link

    - name: Set up clipboard for neovim
      ansible.builtin.template:
        src: clipboard.lua
        dest: "{{ nvim_base }}_1/config/lua/custom/clipboard.lua"
        mode: 0644

- name: Install NvChad 2
  block:
    - name: Install NvChad 2
      ansible.builtin.git:
        repo: "{{ manifest.nvchad2.url }}"
        dest: "{{ nvim_base }}_2/config"
        version: "{{ manifest.nvchad2.version }}"
        force: true
      register: nvchad_installed
      retries: "{{ web_retries }}"
      delay: "{{ web_delay }}"
      until: nvchad_installed is not failed
      changed_when: nvchad_installed.before != nvchad_installed.after

    - name: Create symlink to NvChad config
      ansible.builtin.file:
        src: "{{ remote_role_path }}/files/nvchad2"
        dest: "{{ nvim_base }}_2/config/lua/custom"
        state: link
        force: true

    - name: Create neovim keymap directory
      ansible.builtin.file:
        path: "{{ nvim_base }}_2/config/keymap"
        state: directory
        mode: 0755

    - name: Create symlink to rnk keymap
      ansible.builtin.file:
        src: "{{ dotfiles_path }}/roles/keyboard_layouts/files/rnk-qwerty-jcuken.vim"
        dest: "{{ nvim_base }}_2/config/keymap/rnk-qwerty-jcuken.vim"
        state: link
        force: true

    - name: Set up clipboard for neovim
      ansible.builtin.template:
        src: clipboard.lua
        dest: "{{ nvim_base }}_2/config/lua/custom/clipboard.lua"
        mode: 0644

- name: Install LazyVim
  block:
    - name: Install lazy.nvim
      ansible.builtin.git:
        repo: "https://github.com/folke/lazy.nvim"
        dest: "{{ nvim_base }}_3/share/lazy/lazy.nvim"
        version: "{{ lazy_lock['lazy.nvim'].commit }}"
        force: true
      vars:
        lazy_lock: "{{ lookup('file','lazy/lazy-lock.json') | from_json }}"
      register: nvchad_installed
      retries: "{{ web_retries }}"
      delay: "{{ web_delay }}"
      until: nvchad_installed is not failed
      changed_when: nvchad_installed.before != nvchad_installed.after

    - name: Create config directory for lazy
      ansible.builtin.file:
        path: "{{ nvim_base }}_3/config"
        state: directory
        mode: 0755

    - name: Create symlink to LazyVim config
      ansible.builtin.file:
        src: "{{ remote_role_path }}/files/lazy"
        dest: "{{ nvim_base }}_3/config"
        state: link
        force: true

    - name: Create neovim keymap directory
      ansible.builtin.file:
        path: "{{ nvim_base }}_3/config/keymap"
        state: directory
        mode: 0755

    - name: Set up clipboard for neovim
      ansible.builtin.template:
        src: clipboard.lua
        dest: "{{ nvim_base }}_3/config/lua/config/clipboard.lua"
        mode: 0644

- name: Simple configuration version management
  block:
    - name: Create neovim configuration directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: 0755
      loop:
        - "{{ nvim_base }}_{{ nvim_version }}/cache"
        - "{{ nvim_base }}_{{ nvim_version }}/config"
        - "{{ nvim_base }}_{{ nvim_version }}/share"

    - name: Create neovim configuration symlinks
      ansible.builtin.file:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        state: link
      loop:
        - {src: "{{ nvim_base }}_{{ nvim_version }}/cache", dest: "{{ home }}/.cache/nvim"}
        - {src: "{{ nvim_base }}_{{ nvim_version }}/config", dest: "{{ home }}/.config/nvim"}
        - {src: "{{ nvim_base }}_{{ nvim_version }}/share", dest: "{{ home }}/.local/share/nvim"}

- name: Set up bash
  ansible.builtin.lineinfile:
    path: "{{ home }}/.bashrc"
    regexp: 'source .*/{{ role_name }}/files'
    line: source {{ remote_role_path }}/files/bash.sh

- name: Create symlink to {{ role_name }}.fish
  ansible.builtin.file:
    src: "{{ remote_role_path }}/files/{{ role_name }}.fish"
    dest: "{{ home }}/.config/fish/conf.d/{{ role_name }}.fish"
    state: link

- name: Create symlinks to fish functions
  ansible.builtin.file:
    src: "{{ remote_role_path }}/files/fish_functions/{{ item | basename }}"
    dest: "{{ home }}/.config/fish/functions/{{ item | basename }}"
    state: link
  loop: "{{ lookup('fileglob', '{{ role_path }}/files/fish_functions/*', wantlist=True) }}"
