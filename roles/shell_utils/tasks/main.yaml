- name: Install eza
  ansible.builtin.unarchive:
    src: "{{ manifest.eza.url }}"
    dest: "{{ home }}/.local/bin"
    remote_src: true
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  retries: "{{ web_retries }}"
  delay: "{{ web_delay }}"
  register: shell_utils_downloaded
  until: shell_utils_downloaded is not failed

- name: Install eza, fd, bat, zoxide, hexyl, jq and moreutils
  become: true
  ansible.builtin.package:
    name:
      - bat
      - fd-find
      - hexyl
      - jq
      - moreutils
      - ripgrep
      - zoxide

- name: Create xh directory
  ansible.builtin.file:
    path: "{{ home }}/.local/xh"
    state: directory
    mode: "0o755"

- name: Download xh binary
  ansible.builtin.unarchive:
    src: "{{ manifest.xh.url }}"
    dest: "{{ home }}/.local/xh"
    extra_opts:
      - --strip-components=1
    remote_src: true
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  retries: "{{ web_retries }}"
  delay: "{{ web_delay }}"
  register: shell_utils_downloaded
  until: shell_utils_downloaded is not failed

- name: Create symlink to xh man
  ansible.builtin.file:
    src: "{{ home }}/.local/xh/doc/xh.1"
    dest: "{{ home }}/.local/share/man/man1/xh.1"
    state: link

- name: Download dust binary
  ansible.builtin.unarchive:
    src: "{{ manifest.dust.url }}"
    dest: "{{ home }}/.local/bin"
    extra_opts:
      - --strip-components=1
      - --exclude=LICENSE
      - --exclude=*.md
    remote_src: true
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  retries: "{{ web_retries }}"
  delay: "{{ web_delay }}"
  register: shell_utils_downloaded
  until: shell_utils_downloaded is not failed

- name: Download dua binary
  ansible.builtin.unarchive:
    src: "{{ manifest.dua.url }}"
    dest: "{{ home }}/.local/bin"
    extra_opts:
      - --strip-components=1
      - --exclude=LICENSE
      - --exclude=*.md
      - --exclude=complete
    remote_src: true
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  retries: "{{ web_retries }}"
  delay: "{{ web_delay }}"
  register: shell_utils_downloaded
  until: shell_utils_downloaded is not failed

- name: Install carapace
  ansible.builtin.unarchive:
    src: "{{ manifest.carapace.url }}"
    dest: "{{ home }}/.local/bin"
    remote_src: true
    extra_opts:
      - --exclude=LICENSE
      - --exclude=*.md
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  retries: "{{ web_retries }}"
  delay: "{{ web_delay }}"
  register: shell_utils_downloaded
  until: shell_utils_downloaded is not failed

- name: Create symlink to carapace nu config
  ansible.builtin.file:
    src: "{{ role_host_path }}/files/carapace.nu"
    dest: "{{ home }}/.config/nushell/autoload/carapace.nu"
    state: link

- name: Setup yazi
  vars:
    shell_utils_yazi_fullname: "{{ manifest.yazi.url | split('/') | last | split('.') | first }}"
    shell_utils_yazi_fullpath: "{{ home }}/.local/{{ shell_utils_yazi_fullname }}"
    shell_utils_yazi_path: "{{ home }}/.local/bin/yazi_dir"
  block:
    - name: Download yazi
      ansible.builtin.unarchive:
        src: "{{ manifest.yazi.url }}"
        dest: "{{ home }}/.local/"
        remote_src: true
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      retries: "{{ web_retries }}"
      delay: "{{ web_delay }}"
      register: shell_utils_downloaded
      until: shell_utils_downloaded is not failed

    - name: Create symlink to yazi fullpath
      ansible.builtin.file:
        src: "{{ shell_utils_yazi_fullpath }}"
        dest: "{{ shell_utils_yazi_path }}"
        state: link

    - name: Create symlinks to yazi binaries
      ansible.builtin.file:
        src: "{{ shell_utils_yazi_fullpath }}/{{ item }}"
        dest: "{{ home }}/.local/bin/{{ item }}"
        state: link
      loop: [ya, yazi]

    - name: Create symlink to yazi configs
      ansible.builtin.file:
        src: "{{ role_host_path }}/files/yazi"
        dest: "{{ home }}/.config/yazi"
        state: link

    - name: Install more utils for yazi
      become: true
      ansible.builtin.package:
        name:
          - file
          - poppler-utils
          - poppler-data
          - unar

- name: Create symlink to fd on Ubuntu
  ansible.builtin.file:
    src: "/usr/bin/fdfind"
    dest: "{{ home }}/.local/bin/fd"
    state: link
  when: ansible_distribution == "Ubuntu"

- name: Create symlink to bat on Ubuntu
  ansible.builtin.file:
    src: "/usr/bin/batcat"
    dest: "{{ home }}/.local/bin/bat"
    state: link
  when: ansible_distribution == "Ubuntu"

- name: Download fzf
  ansible.builtin.git:
    repo: "{{ manifest.fzf.url }}"
    dest: "{{ home }}/.fzf"
    version: "{{ manifest.fzf.version }}"
  register: shell_utils_fzf_download
  retries: "{{ web_retries }}"
  delay: "{{ web_delay }}"
  until: shell_utils_fzf_download is not failed

- name: Install fzf
  ansible.builtin.shell: |
    # Installing fish completion here will break custom settings
    # of the patrickf1/fzf.fish plugin
    "{{ home }}"/.fzf/install --all --no-fish
  changed_when: shell_utils_fzf_download is changed

- name: Download fisher
  ansible.builtin.get_url:
    url: https://git.io/fisher
    dest: "{{ home }}/.config/fish/functions/fisher.fish"
    mode: "0o755"
  retries: "{{ web_retries }}"
  delay: "{{ web_delay }}"
  register: shell_utils_downloaded
  until: shell_utils_downloaded is not failed

- name: Create symlink to fish_plugins
  ansible.builtin.file:
    src: "{{ role_host_path }}/files/fish_plugins"
    dest: "{{ home }}/.config/fish/fish_plugins"
    state: link

- name: Create oh-my-posh directory
  ansible.builtin.file:
    path: "{{ home }}/.config/oh-my-posh/themes"
    state: directory
    mode: "0o755"

- name: Install oh-my-posh
  ansible.builtin.get_url:
    url: "{{ manifest.oh_my_posh.url }}"
    dest: "{{ home }}/.local/bin/oh-my-posh"
    mode: "0o755"
    force: true
  retries: "{{ web_retries }}"
  delay: "{{ web_delay }}"
  register: shell_utils_downloaded
  until: shell_utils_downloaded is not failed

- name: Install oh-my-posh custom theme
  ansible.builtin.file:
    src: "{{ role_host_path }}/files/theme.json"
    dest: "{{ home }}/.config/oh-my-posh/theme.json"
    state: link

- name: Install oh-my-posh themes
  ansible.builtin.unarchive:
    src: "{{ manifest.oh_my_posh_themes.url }}"
    dest: "{{ home }}/.config/oh-my-posh/themes"
    remote_src: true
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  retries: "{{ web_retries }}"
  delay: "{{ web_delay }}"
  register: shell_utils_downloaded
  until: shell_utils_downloaded is not failed

- name: Install fisher plugins
  ansible.builtin.shell: |
    set -o pipefail
    set -x TERM xterm-256color
    fisher update
  args:
    executable: "{{ home }}/.local/bin/fish"
  changed_when: false

- name: Create symlink to cmd.exe
  ansible.builtin.file:
    src: "/mnt/c/Windows/System32/cmd.exe"
    dest: "{{ home }}/.local/bin/cmd.exe"
    state: link
  when: in_wsl

- name: Set up bash
  ansible.builtin.lineinfile:
    path: "{{ home }}/.bashrc"
    regexp: "source .*/{{ role_name }}/files"
    line: source {{ role_host_path }}/files/bash.sh

- name: Create symlink to fish config of {{ role_name }}
  ansible.builtin.file:
    src: "{{ role_host_path }}/files/{{ role_name }}.fish"
    dest: "{{ home }}/.config/fish/conf.d/{{ role_name }}.fish"
    state: link

- name: Create symlinks to fish functions
  ansible.builtin.file:
    src: "{{ role_host_path }}/files/fish_functions/{{ item | basename }}"
    dest: "{{ home }}/.config/fish/functions/{{ item | basename }}"
    state: link
  loop: "{{ lookup('fileglob', '{{ role_path }}/files/fish_functions/*', wantlist=True) }}"
  register: shell_utils_functions

# git diff -p --no-index --no-prefix -- a/functions/ b/functions/ >
# ~/projects/dotfiles/roles/shell_utils/files/fzf.fish.patch
- name: Patch fzf - fix focus events and add ripgrep support
  ansible.posix.patch:
    src: "{{ role_path }}/files/fzf.fish.patch"
    basedir: "{{ home }}/.config/fish"
    strip: 1
  changed_when: shell_utils_functions is changed
