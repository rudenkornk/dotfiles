- name: Install git
  become: true
  ansible.builtin.package:
    name: git

- name: Set up user.gitconfig
  ansible.builtin.template:
    src: gitconfig.user
    dest: "{{ home }}/.gitconfig.user"
    mode: "0o644"

- name: Set up global .gitconfig
  ansible.builtin.file:
    src: "{{ role_host_path }}/files/gitconfig"
    dest: "{{ home }}/.gitconfig"
    state: link

- name: Add git-secret gpg key
  become: true
  ansible.builtin.get_url:
    url: "{{ git_secret_gpg }}"
    dest: "{{ apt_keys }}/git_secret.asc"
    mode: "0o644"
  retries: "{{ web_retries }}"
  delay: "{{ web_delay }}"
  register: git_installed
  until: git_installed is not failed
  when: ansible_distribution == "Ubuntu"

- name: Add git-secret repository
  become: true
  ansible.builtin.apt_repository:
    repo: deb [arch={{ deb_arch }} signed-by={{ apt_keys }}/git_secret.asc] {{ git_secret_repo }}
  when: ansible_distribution == "Ubuntu"

- name: Install git secret
  become: true
  ansible.builtin.package:
    name: git-secret

- name: Install mr
  become: true
  ansible.builtin.package:
    name: mr

- name: Set up .mrconfig
  ansible.builtin.file:
    src: "{{ role_host_path }}/files/mrconfig"
    dest: "{{ home }}/.mrconfig"
    state: link

- name: Add GitHub cli gpg key on Ubuntu
  become: true
  ansible.builtin.get_url:
    url: "{{ git_gh_cli_gpg }}"
    dest: "{{ apt_keys }}/gh_cli.gpg"
    mode: "0o644"
  retries: "{{ web_retries }}"
  delay: "{{ web_delay }}"
  register: gh_cli_installed
  until: gh_cli_installed is not failed
  when: ansible_distribution == "Ubuntu"

- name: Add GitHub cli repository on Ubuntu
  become: true
  ansible.builtin.apt_repository:
    repo: deb [arch={{ deb_arch }} signed-by={{ apt_keys }}/gh_cli.gpg] {{ git_gh_cli_repo }}
  when: ansible_distribution == "Ubuntu"

- name: Add GitHub cli repository on Fedora
  become: true
  ansible.builtin.yum_repository:
    name: gh-cli
    description: "packages for the GitHub CLI"
    baseurl: "{{ git_gh_cli_rpm_repo }}"
    enabled: true
    gpgkey: "{{ git_gh_cli_gpg }}"
  when: ansible_distribution == "Fedora"

- name: Install GitHub cli
  become: true
  ansible.builtin.package:
    name: gh

# unarchive usually sets owner and group to a current user
# except for the case when the user is root
# In such case it can even set different groups in sequential runs,
# which leads to idempotency check failures
# For a weird reason this happens only on this exact unarchive usage.
# Thus, we force owner and group to the current user here
# See https://docs.ansible.com/ansible/latest/collections/ansible/builtin/unarchive_module.html#parameter-owner
- name: Install lazygit
  ansible.builtin.unarchive:
    src: "{{ manifest.lazygit.url }}"
    dest: "{{ home }}/.local/bin"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    remote_src: true
  retries: "{{ web_retries }}"
  delay: "{{ web_delay }}"
  register: git_downloaded
  until: git_downloaded is not failed

- name: Create ~/.config/lazygit directory
  ansible.builtin.file:
    path: "{{ home }}/.config/lazygit"
    state: directory
    mode: "0o755"

# https://github.com/jesseduffield/lazygit/blob/master/docs/Config.md
- name: Create symlink to global lazygit config
  ansible.builtin.file:
    src: "{{ role_host_path }}/files/lazygit.yaml"
    dest: "{{ home }}/.config/lazygit/config.yml"
    state: link

- name: Set up bash
  ansible.builtin.lineinfile:
    path: "{{ home }}/.bashrc"
    regexp: "source .*/{{ role_name }}/files"
    line: source {{ role_host_path }}/files/bash.sh

- name: Create symlinks to fish functions
  ansible.builtin.file:
    src: "{{ role_host_path }}/files/fish_functions/{{ item | basename }}"
    dest: "{{ home }}/.config/fish/functions/{{ item | basename }}"
    state: link
  loop: "{{ lookup('fileglob', '{{ role_path }}/files/fish_functions/*', wantlist=True) }}"
